// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  image         String?
  bio           String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  articles      Article[] @relation("AuthorArticles")
  comments      Comment[]
  likes         Like[]
  isActive      Boolean   @default(true)
}

enum Role {
  USER
  ADMIN
}

model Article {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  content     String
  excerpt     String?
  coverImage  String?
  published   Boolean     @default(false)
  featured    Boolean     @default(false)
  viewCount   Int         @default(0)
  author      User        @relation("AuthorArticles", fields: [authorId], references: [id])
  authorId    String
  categories  Category[]  @relation("ArticleCategories")
  tags        Tag[]       @relation("ArticleTags")
  comments    Comment[]
  likes       Like[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  articles    Article[] @relation("ArticleCategories")
}

model Tag {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  articles    Article[] @relation("ArticleTags")
}

model Comment {
  id          String    @id @default(cuid())
  content     String
  article     Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId   String
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Like {
  id          String    @id @default(cuid())
  article     Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId   String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  createdAt   DateTime  @default(now())

  @@unique([articleId, userId])
}

model View {
  id          String    @id @default(cuid())
  article     Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId   String
  sessionId   String
  createdAt   DateTime  @default(now())

  @@unique([articleId, sessionId])
}
